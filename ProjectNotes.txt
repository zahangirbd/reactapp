0) upgrade npm if it is required 
$npm install npm@latest -g

https://create-react-app.dev/docs/getting-started

1) Add a global command for react 
$npm i -g create-react-app

2) visual studo Code (user)
https://code.visualstudio.com


3) create new project
$npx create-react-app reactapp
$cd reactapp
$npm start


4) install bootstrap & other packages
$npm i bootstrap
$npm install axios 


4) For starting the project from github
$cd reactapp
$npm install
$npm start

5) setting different port
Change port: 9000 from 3000 in windows in package.json

"scripts": {
    "start": “set PORT=9000 && react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject"
  }

6) Setting proxy for api call a to different server.
add following line in package.json

"proxy": "http://localhost:3000/api/v1",




$npm i bootstrap

https://www.youtube.com/watch?v=Ke90Tje7VS0

Note: 
	1) In map we must need set key
	e.g., 
	  <li>
		{this.state.tags.map(tag=><li key={tag}>{tag}</li>)}
	  </li>

	2) onClick={only_function_name_without_bracket}
	e.g., onClick={this.handleIncrement}
	
	3) need to bind this in constructor
	e.g.,
constructor(){
        super();
        //this is important to make this available when click will be invoked
        this.handleIncrement = this.handleIncrement.bind(this); 
    }

	4) state{} is called once in a component during initialization. Therefore, if we change the props value it doesn't change the local state. 

	
	5) Using ... we can clone object 
	e.g., const counters = [...this.state.counters];


	6) When need to combine some different components we can use <div> or <React.Fragment>
	e.g., 
    <React.Fragment>
      <NavBar/>
      <main role="main" class="container">
        <Counters></Counters>
      </main>
    </React.Fragment>

	7) Destructuring Arguments
	e.g.,
const NavBar = ({totalCounters}) => {
    return ( 
        <nav className="navbar navbar-expand-lg navbar-light bg-light">
            <a className="navbar-brand" href="#">Navbar{" "}
                <span className="badge badge-pill badge-secondary">{totalCounters}</span>
            </a>
        </nav>
     );
}
 


Here, totalCounters are coming from the caller function from a 
<NavBar totalCounters={this.state.counters.filter(c=> c.value > 0).length}/>


If we have multiple properties in NavBar then only 'totalCounters' will be passed to the above function. 


	7) Lifecycle Hooks
	
MOUNT				UPDATE			UNMOUNT
constructor			
render				render
componentDidMount		componentDidUpdate	componentWillUnmount



	constructor(props){ //if we define with 'props' then only we get the value. If we don't in the parameter then we shall not be able to use it lar
		super();
		//here we can directly set the state. if we use setState the it will throw a problem as the object is not initiaized yet. 
		this.state = this.props.something
	}



	componentDidMount(){
		//we can call AJAX call here to get some data from server
		//we can set here by using, this.setState({movie});
	}


	//we shall not be able to use any Lifecyle Hook in the Stateless functional component


	componentDidUpdate(prevProps, prevState){
		//we can call AJAX call here to get some data from server
	}









